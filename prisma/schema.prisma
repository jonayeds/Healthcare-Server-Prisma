generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole   @default(PATIENT)
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  admin   Admin?
  doctor  Doctor?
  patient Patient?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Doctor {
  id                  String   @id @default(uuid())
  name                String
  email               String   @unique
  profilePhoto        String?
  contactNumber       String
  address             String?
  registrationNumber  String   @unique
  experience          Int      @default(0)
  gender              Gender
  isDeleted           Boolean  @default(false)
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  averageRating       Float    @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  specialities    DoctorSpeciality[]
  doctorSchedules DoctorSchedule[]
  appointments    Appointment[]

  @@map("doctors")
}

model Patient {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  address       String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  healthData    PatientHealthdata?
  medicalReport MedicalReport[]
  appointments  Appointment[]

  user User @relation(fields: [email], references: [email])

  @@map("patients")
}

model Speciality {
  id    String @id @default(uuid())
  title String
  icon  String

  doctors DoctorSpeciality[]

  @@map("specialities")
}

model DoctorSpeciality {
  doctorId     String
  specialityId String

  doctor     Doctor     @relation(fields: [doctorId], references: [id])
  speciality Speciality @relation(fields: [specialityId], references: [id])

  @@id([doctorId, specialityId])
  @@map("doctorSpecialities")
}

model PatientHealthdata {
  id                 String        @id @default(uuid())
  patientId          String        @unique
  gender             Gender
  dateOfBirth        String
  bloodGroup         BloodGroup
  hasAllergies       Boolean?      @default(false)
  hasDiabetes        Boolean?      @default(false)
  height             String
  weight             String
  smokingStatus      Boolean?      @default(false)
  dietaryPreferences String?
  pregnancyStatus    Boolean?      @default(false)
  mentalHealthStatus String?
  immunizationStatus String?
  hasPastSergeries   Boolean?      @default(false)
  recentAnxity       Boolean?      @default(false)
  recentDepression   Boolean?      @default(false)
  maritalStatus      MaritalStatus @default(SINGLE)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  patient Patient @relation(fields: [patientId], references: [id])

  @@map("patientHealthdata")
}

model MedicalReport {
  id         String   @id @default(uuid())
  patientId  String
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id])

  @@map("medicalReports")
}

model Schedule {
  id            String   @id @default(uuid())
  startDateTime DateTime @unique
  endDateTime   DateTime @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  doctorSchedules DoctorSchedule[]
  appointments    Appointment?

  @@map("schedules")
}

model DoctorSchedule {
  doctorId      String
  scheduleId    String
  isBooked      Boolean @default(false)
  appointmentId String?

  schedule Schedule @relation(fields: [scheduleId], references: [id])
  doctor   Doctor   @relation(fields: [doctorId], references: [id])

  @@id([doctorId, scheduleId])
  @@map("doctorSchedules")
}

model Appointment {
  id             String            @id @default(uuid())
  patientId      String
  doctorId       String
  scheduleId     String @unique
  videoCallingId String?
  status         AppointmentStatus @default(PENDING)
  paymentStatus  PaymentStatus     @default(UNPAID)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  patient  Patient  @relation(fields: [patientId], references: [id])
  doctor   Doctor   @relation(fields: [doctorId], references: [id])
  schedule Schedule @relation(fields: [scheduleId], references: [id])

  @@map("appointments")
}

enum AppointmentStatus {
  PENDING
  INPROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}
